name: Build Docker Image

on:
  push:
  pull_request:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      tag:
        description: 'RVC tag to build'
        required: true
        default: "updated1006v2"
      python_version:
        description: 'Python version to build'
        required: true
        default: "3.9.18"

concurrency: 
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  DOCKER_BUILDKIT: 1
  RVC_TAG: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || 'updated1006v2' }}
  PYTHON_VERSION: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.python_version || '3.9.18' }}
  GHCR_REGISTRY: ghcr.io
  GHCR_USERNAME: ${{ github.actor }}
  GHCR_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PAT }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ env.GHCR_USERNAME }}
        password: ${{ env.GHCR_PASSWORD }}
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        # registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}
    - uses: docker/setup-qemu-action@v3
    - uses: docker/setup-buildx-action@v3
      with:
        version: "lab:latest"
        driver: cloud
        endpoint: "cabbagelettuce/cabbage"
        install: true
    - uses: docker/metadata-action@v5
      id: meta
      with:
        # images: ${{ env.DOCKER_USERNAME }}/${{ github.repository_id }}
        images: ${{ env.GHCR_REGISTRY }}/${{ github.repository }}
        tags: |
          latest
          ${{ github.sha }}
          ${{ github.ref }}
          ${{ env.RVC_TAG }}
          ${{ env.RVC_TAG }}-${{ env.PYTHON_VERSION }}
    - uses: docker/build-push-action@v5
      with:
        pull: true
        push: ${{ github.event_name != 'pull_request' }}
        # cache-from: type=gha
        # cache-to: type=gha,mode=max
        target: final
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          RVC_TAG=${{ env.RVC_TAG }}
          RUNTIME_USERNAME=rvc
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
        # outputs: ${{ github.event_name == 'pull_request' && 'type=cacheonly' || 'type=registry,push=true' }}
  container-export:
    name: Export Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    needs: build
    steps:
    - uses: actions/checkout@v4
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ env.GHCR_USERNAME }}
        password: ${{ env.GHCR_PASSWORD }}
    - name: Image name
      id: image
      run: |
        echo "name=${{ env.GHCR_REGISTRY }}/${{ github.repository }}:${{ env.RVC_TAG }}-${{ env.PYTHON_VERSION }}" >> $GITHUB_OUTPUT
        echo "filename=rvc_${{ env.RVC_TAG }}-${{ env.PYTHON_VERSION }}.tar" >> $GITHUB_OUTPUT
    - name: Pull and save image
      run: |
        docker pull "${{ steps.image.outputs.name }}"
        docker save "${{ steps.image.outputs.name }}" -o "${{ steps.image.outputs.filename }}"
    - name: Upload image artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.image.outputs.filename }}
        path: ${{ steps.image.outputs.filename }}
